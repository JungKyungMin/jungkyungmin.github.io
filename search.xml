<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mutex 와 Semaphore</title>
      <link href="/2021/11/11/mutexsemaphore-md/"/>
      <url>/2021/11/11/mutexsemaphore-md/</url>
      
        <content type="html"><![CDATA[<p>뮤텍스와 세마포어는 “여러 프로세스나 쓰레드가 공유 자원에 접근하는 것을 제어하기 위한 방법”<br>공유 자원을 여러 프로세스가 동시에 액세스하면 시간적인 차이 등으로 인하여 잘못된 결과를 만들어 낼 수 있기 때문에 한 프로세스가 위험 부분을 수행하고 있을 때, 즉 공유 자원을 액세스하고 있을 때는 다른 프로세스들은 절대로 그 데이터를 액세스하지 못하도록 하여야 한다.</p><ul><li>뮤텍스는 Locking 메커니즘으로 Lock을 걸은 쓰레드만이 임계영역을 나갈 때 Lock을 해제할 수 있으며, 공유자원에 오직 1개의 프로세스(또는 쓰레드)만 접근할 수 있다.<br>Lock-&gt; 임계영역수행 -&gt; Unlock -&gt; 다음차례의 프로세스가 Lock -&gt; 임계영역수행 -&gt;unlock …<br></li><li>세마포어는 Signaling 메커니즘으로 뮤텍스와 달리 Lock을 걸지 않은 쓰레드도 signal을 사용해 Lock을 해제할 수 있으며, 비교적 긴 시간을 확보하는 리소스에 대한 이용방법이다. 세마포어는 이진세마포어와 카운팅세마포어가 있는데, 이진세마포어는 뮤텍스와 유사하게 동작한다. 카운팅세마포어는 공유자원에 세마포어의 변수만큼의 프로세스(또는 쓰레드)가 접근할 수 있다. 각 자원을 사용하려는 프로세스는 세마포어에 wait()연산을 수행해서 세마포어 변수의 값을 1만큼 감소시키고, 작업이 끝나면 변수를 1만큼 증가시킨다. 세마포어 변수는 현재 공유자원을 사용할 수 있는 프로세스(쓰레드)의 개수다. 즉, 변수의 값이 0이 되면 모든 자원이 사용중임을 나타낸다.<br>세마포어에서는 교착상태(deadlock)이 발생할 수 있다.</li></ul><p>∴ 임계 영역(Critical Section) : 여러 프로세스가 데이터를 공유하며 수행될 때, 각 프로세스에서 공유 데이터를 접근하는 프로그램 코드 블록</p><br>쉬운 예로 설명하자면<br>Mutex : 화장실이 하나 뿐인 식당. 화장실을 가기 위해서는 카운터에서 열쇠를 받아가야 한다. 당신이 화장실을 가려고 하는데 카운터에 키가 있으면 화장실에 사람이 없다는 뜻이고 당신은 그 열쇠를 이용해 화장실을 이용할 수 있다. 당신이 화장실을 이용하고 있는 와중에 다른 테이블의 손님이 화장실에 가고 싶어 졌다. 이 손님은 아무리 용무가 급하더라도 열쇠가 없기 때문에 화장실에 들어갈 수 없다. 당신이 화장실에서 나와 카운터에 키를 반납할 때까지…곧이어 또 다른 사람이 화장실에 가고 싶어 졌으나 이 사람 또한 카운터에서 줄을 서야 한다. 당신이 화장실에서 나와 키를 반납하면 기다리던 사람들 중 맨 앞에 있던 사람은 키를 받아 화장실을 이용한다.(사람=프로세스or쓰레드 , 화장실=공유자원, 키=공유자원에 접근하기 위해 필요한 어떤 오브젝트)<br><br>Semaphore : Mutex와 달리 화장실이 여러 개인 식당.세마포어를 이용하는 레스토랑의 화장실에는 여러 개의 칸이 있다. 그리고 화장실 입구에는 현재 화장실의 빈칸 개수를 보여주는 전광판이 있다. 만약 당신이 화장실에 가고 싶다면 입구에서 빈 칸의 개수를 확인하고 빈 칸이 1개 이상이라면 빈칸의 개수를 하나 뺀 다음에 화장실로 입장해야 한다. 그리고 나올 때 전광판의 숫자를 1 올려줘야 한다. 모든 칸에 사람이 들어갔을 경우 빈 칸의 개수는 0이 되며 이 때 화장실에 가고싶어 하는 사람이 있다면 빈 칸의 개수가 1로 바뀔떄까지 기다렸다가 이용해야 한다. 이처럼 세마포어는 공통으로 관리하는 하나의 값을 이용해 상호배제를 달성한다. <p><a href="https://worthpreading.tistory.com/90">https://worthpreading.tistory.com/90</a><br><a href="https://jwprogramming.tistory.com/13">https://jwprogramming.tistory.com/13</a><br><a href="https://chelseashin.tistory.com/40">https://chelseashin.tistory.com/40</a></p>]]></content>
      
      
      <categories>
          
          <category> 운영체제 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mutex </tag>
            
            <tag> semaphore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Servlet Programming</title>
      <link href="/2021/10/28/servlet-md/"/>
      <url>/2021/10/28/servlet-md/</url>
      
        <content type="html"><![CDATA[<p>브라우저 : 클라이언트의 요청을 받아서 서버에 전송하고, 서버의 응답을 다시 클라이언트에 반환해준다.</p><p>서블릿 : 클라이언트의 요청을 받고 요청을 처리하여 결과를 클라이언트에게 제공하는 자바 인터페이스. java.servlet.package에 정의된 인터페이스.</p><p>JSP(Java Server Pages) : HTML 코드에 JAVA 코드를 넣어 동적 웹페이지를 생성하는 웹어플리케이션 도구. JSP가 실행되면 자바 서블릿으로 변환되며 WAS에서 동작되면서 필요한 기능을 수행하고 그렇게 생성된 데이터를 웹페이지와 하께 클라이언트로 응답한다.</p><p>웹서버 : 하드웨어와 스프트웨어에서 두가지 의미를 갖는다.</p><ul><li>하드웨어 : 인터넷에 연결되어 웹에 연결된 다른 기기들이 웹서버의 데이터를 주고받을 수 있도록 한다.</li><li>소프트웨어 : 웹브라우저와 같은 클라이언트로부터 HTTP요청을 받아들이고, HTML 문서와 같은 웹 페이지를 받환하는 컴퓨터 프로그램<img src="/image/apachetomcat2.svg" width="70%" height="70%"/></li></ul><h3 id="아파치와-톰캣"><a href="#아파치와-톰캣" class="headerlink" title="아파치와 톰캣"></a>아파치와 톰캣</h3><p>아파치 : 아파치 소프트웨어 재단</p><p>아파치 서버 : 우리가 흔히 아파치라고 부르는 Apache HTTP Server, 정적인 파일을 처리해주는 웹 서버</p><p>톰캣 WAS(Web Application Server) : DB처리와 같은 동적인 기능들을 가공하여 HTML파일로 만들어 클라이언트에게 제공, JSP와 Servlet을 구동하기 위한 서블릿 컨테이너 역할을 수행한다. 아파치서버와는 다르게 DB연결, 다른 응용프로그램과 상호 작용 등 동적인 기능들을 사용할 수 있다.</p><p>WAS (Web Application Server)</p><ul><li>컨테이너, 웹컨테이너, 서블릿 컨테이너라고도 부름.</li><li>DB처리, 로직 처리를 요구하는 동적타입을 제공하는 소프트웨어 프레임워크를 의미한다.</li><li>프로그램 실행환경과 데이터베이스 접속기능을 제공한다.</li><li>여러개의 트랜잭션을 관리한다.</li><li>업무를 처리하는 비즈니스 로직을 수행한다.</li></ul><p>아파치 톰캣이라 부르는 이유<br>아파치와 톰캣의 기능은 나뉘어져 있지만, 톰캣 안에 있는 컨테이너를 통해 일부 아파치의 기능을 발휘하기 때문에 아파치 톰캣으로 부르곤 한다. 하지만 톰캣이 아파치의 모든 기능을 포함하고 있는 것은 아니다.<br><img src="/image/apachetomcat.png" width="70%" height="70%"/></p><p>@ <a href="https://velog.io/@kdhyo">https://velog.io/@kdhyo</a><br>@ <a href="https://developer.mozilla.org/">https://developer.mozilla.org/</a><br>@ <a href="https://limmmee.tistory.com/4">https://limmmee.tistory.com/4</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> X </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DB와 DBMS</title>
      <link href="/2021/10/21/db/"/>
      <url>/2021/10/21/db/</url>
      
        <content type="html"><![CDATA[<h1 id="1-데이터베이스-DB-란"><a href="#1-데이터베이스-DB-란" class="headerlink" title="1. 데이터베이스(DB)란?"></a>1. 데이터베이스(DB)란?</h1><p>데이터베이스는 컴퓨터시스템에 전자적으로 저장된 체계적 데이터의 모음<br><br></p><h4 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h4><ul><li>실시간 접근성<ul><li>사용자의 요구(Query)를 실시간 처리 및 응답한다.</li></ul></li><li>계속적인 변화<ul><li>삽입, 삭제, 수정 등의 동적인 작업을 통해 데이터를 지속적으로 갱신할 수 있다.</li></ul></li><li>동시공유<ul><li>여러 사용자가 동일한 데이터를 동시에 접근 및 사용할 수 있다.</li></ul></li><li>내용에 따른 참조<ul><li>데이터의 물리적인 위치가 아니라 데이터 값에 따라 참조 된다.</li></ul></li></ul><h1 id="2-데이터베이스-관리시스템-DBMS-란"><a href="#2-데이터베이스-관리시스템-DBMS-란" class="headerlink" title="2. 데이터베이스 관리시스템(DBMS)란?"></a>2. 데이터베이스 관리시스템(DBMS)란?</h1><ul><li>DB를 생성 및 관리하며 응용 프로그램들이 DB를 공유하며 사용할 수 있는 환경을 제공하는 소프트웨어.</li><li>데이터와 응용 프로그램 사이를 중계한다. ( DB ← DBMS → 응용프로그램 )</li></ul><h4 id="DBMS의-장점"><a href="#DBMS의-장점" class="headerlink" title="DBMS의 장점"></a>DBMS의 장점</h4><ul><li>데이터 중복 최소화</li><li>데이터의 공용</li><li>데이터 일관성 유지 <ul><li>한 가지를 나타내는 두 개의 데이터가 있을 때, 하나의 데이터만 변경되고 다른 하나는 변경되지 않는다면 데이터간의 불일치가 생긴다.</li></ul></li><li>무결성 유지</li><li>보안 보장</li></ul><h4 id="DBMS의-단점"><a href="#DBMS의-단점" class="headerlink" title="DBMS의 단점"></a>DBMS의 단점</h4><ul><li>비용<ul><li>H/W, DBMS, 운영비, 교육비, 개발비</li></ul></li></ul><h1 id="3-DB-응용"><a href="#3-DB-응용" class="headerlink" title="3. DB 응용"></a>3. DB 응용</h1><h2 id="Data-Warehouse"><a href="#Data-Warehouse" class="headerlink" title="Data Warehouse"></a>Data Warehouse</h2><ul><li>데이터 분석을 위한 거대한 데이터 보관소</li><li>다수의 데이터 소스로부터 분석에 필요한 자료를 미리 가공하여 수집</li></ul><h2 id="Data-Mining"><a href="#Data-Mining" class="headerlink" title="Data Mining"></a>Data Mining</h2><ul><li>대규모의 데이터로부터 데이터의 패턴이나 규칙 등의 유용한 정보를 자동으로 발견하는 응용 및 방법</li></ul><h1 id="4-관계형-Relational-모델"><a href="#4-관계형-Relational-모델" class="headerlink" title="4. 관계형(Relational) 모델"></a>4. 관계형(Relational) 모델</h1><h2 id="핵심-용어"><a href="#핵심-용어" class="headerlink" title="핵심 용어"></a>핵심 용어</h2><ul><li>Database : Table의 집합</li><li>Table : Row의 집합</li><li>Row : Table의 행</li><li>Column : Table의 열</li><li>Domain : 특정 Column이 가질 수 있는 값의 집합</li></ul><h2 id="관계형-모델의-특징"><a href="#관계형-모델의-특징" class="headerlink" title="관계형 모델의 특징"></a>관계형 모델의 특징</h2><h4 id="Column의-값은-원자값이어야-함"><a href="#Column의-값은-원자값이어야-함" class="headerlink" title="Column의 값은 원자값이어야 함"></a>Column의 값은 원자값이어야 함</h4><ul><li>값의 집합, Multivalue는 가질 수 없음<h4 id="Schema"><a href="#Schema" class="headerlink" title="Schema"></a>Schema</h4></li><li>데이터베이스의 구조를 정의<h4 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h4></li><li>값이 지정되지 않았음을 의미하는 특별한 값 ( 0과는 다른 의미.)</li><li>모든 Domain은 Null값을 포함. (기본적으로 모든 Column에 Null을 저장할 수 있다는 의미)<h4 id="Key"><a href="#Key" class="headerlink" title="Key"></a>Key</h4></li><li>테이블에는 동일한 Row가 존재할 수 없음.</li><li>하나의 Row를 다른 Row와 구별하기 위한 키(Key)가 필요<h4 id="Primary-Key-PK-기본키"><a href="#Primary-Key-PK-기본키" class="headerlink" title="Primary Key (PK) : 기본키"></a>Primary Key (PK) : 기본키</h4></li><li>Table에 Row를 구분하기 위하여 사용하는 기본 키</li><li>하나의 Column, 또는 Column의 집합(복합키) 가능</li><li>Table 생성시 정의됨</li><li>Table에는 동일한 PK를 지닌 Row가 존재할 수 없음<h4 id="Foreign-Key"><a href="#Foreign-Key" class="headerlink" title="Foreign Key"></a>Foreign Key</h4></li><li>다른 Table의 기본키를 참조하는 Column</li><li>Table 간의 관계를 나타내기 위하여 사용</li><li>Null 가능 (차몾되지 않음을 의미)<h4 id="Integrity-Constraint-무결성-제약"><a href="#Integrity-Constraint-무결성-제약" class="headerlink" title="Integrity Constraint (무결성 제약)"></a>Integrity Constraint (무결성 제약)</h4></li><li>개체 무결성(Entity Integrity) : 기본키의 값은 Null이 될 수 없다</li><li>참조 무결성(Referential Integrity) : 외래키의 값은 참조된 릴레이션의 기본키 값이거나 Null이다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> DB </category>
          
          <category> X </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DB </tag>
            
            <tag> DBMS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>지네릭스 &lt;Generics&gt;</title>
      <link href="/2021/10/21/generics/"/>
      <url>/2021/10/21/generics/</url>
      
        <content type="html"><![CDATA[<p>지네릭스란?<br>다양한 타입의 객체들을 다루는 메서드나 컬렉션 클래스에 컴파일 시의 타입체크를 해주는 기능이다. 객체의 타입을 커파일 시에 체크하기 때문에 객체의 타입 안정성을 높이고 형변환의 번거로움이 줄어든다. 타입 안정성을 높인다는 것은 의도하지 않은 타입의 객체가 저장되는 것을 막고, 저장된 객체를 꺼내올 때 원래의 타입과 다른 타입으로 잘못 형변환되어 발생할 수 있는 오류를 줄여준 다는 것이다. 간단히 말하면 다룰 객체의 타입을 미리 명시해줌으로써 번거로운 형변환을 줄여준다는 얘기이다.</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> X </category>
          
      </categories>
      
      
        <tags>
            
            <tag> generics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>h2</title>
      <link href="/2021/10/21/h2/"/>
      <url>/2021/10/21/h2/</url>
      
        <content type="html"><![CDATA[<p>X</p>]]></content>
      
      
      <categories>
          
          <category> X </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring - IoC / DI</title>
      <link href="/2021/10/14/spring-iocdi/"/>
      <url>/2021/10/14/spring-iocdi/</url>
      
        <content type="html"><![CDATA[<h1 id="IoC-Inversion-of-Control-와-DI-Dependency-Injection"><a href="#IoC-Inversion-of-Control-와-DI-Dependency-Injection" class="headerlink" title="IoC ( Inversion of Control ) 와 DI ( Dependency Injection )"></a>IoC ( Inversion of Control ) 와 DI ( Dependency Injection )</h1><!-- ![](/image/iocdi.png){: width="100" height="100"} --><img src="/image/iocdi.png" width="70%" height="70%"/>                     <h2 id="IoC-Inversion-of-Control"><a href="#IoC-Inversion-of-Control" class="headerlink" title="IoC ( Inversion of Control )"></a>IoC ( Inversion of Control )</h2><ul><li>개발자에서 → 프레임워크로 제어의 객체관리권한이 넘어간다.(=제어의 역전)</li><li>스프링에서는 일반적인 Java 객체를 new로 생성하여 개발자가 관리하는 것이 아닌 객체의생성, 생명주기의 관리까지 Spring Container(프레임워크)에 모두 맡긴다.</li><li>POJO ( Plain old java object ) 의 생성, 초기화, 서비스, 소멸에 대한 권한을 가진다.</li></ul><h4 id="DL-Dependency-Lookup-의존성-검색"><a href="#DL-Dependency-Lookup-의존성-검색" class="headerlink" title="DL ( Dependency Lookup ) 의존성 검색"></a>DL ( Dependency Lookup ) 의존성 검색</h4><ul><li>저장소에 저장되어 있는 Bean에 접근하기 위해 컨테이너가 제공하는 API를 이용하여 Bean을 Lookup 하는 것.</li><li>DL 사용 시 컨테이너 종속성이 증가하여 주로 DI를 사용한다.</li></ul><h2 id="DI-Dependency-Injection"><a href="#DI-Dependency-Injection" class="headerlink" title="DI ( Dependency Injection )"></a>DI ( Dependency Injection )</h2><p>각 클래스간의 의존관계를 빈 설정(Bean Definition) 정보를 바탕으로 컨테이너가 자동으로 연결해주는 것.(개발자가 XML이나 annotation을 통해 빈 설정)</p><ul><li><h4 id="DI의-장점"><a href="#DI의-장점" class="headerlink" title="DI의 장점"></a>DI의 장점</h4><ul><li>컴포넌트 간의 결합도가 제거되어 코드테스트에 용이하다.</li><li>DI를 통하여 불가능한 상황을 Mock와 같은 기술을 통해 안정적으로 테스트가 가능하다.</li><li>코드를 확장하거나 변경할 때 영향을 최소화한다. (추상화)</li><li>순환참조를 막을 수 있다.</li><li>코드가 단순해진다.</li></ul></li><li><h4 id="DI의-유형"><a href="#DI의-유형" class="headerlink" title="DI의 유형"></a>DI의 유형</h4><ul><li><p>Setter Injection - Setter 메서드를 이용한 의존성 삽입</p><ul><li>의존성을 입력 받는 setter 메서드를 만들고 이를 통해 의존성을 주입한다.</li></ul></li><li><p>Constructor Injection - 생성자를 이용한 의존성 삽입</p><ul><li>필요한 의존성을 포함하는 클래스의 생성자를 만들고 이를 통해 의존성을 주입한다.</li></ul></li><li><p>Method Injection - 일반 메서드를 이용한 의존성 삽입</p><ul><li>의존성을 입력 받는 일반 메서드를 만들고 이를 통해 의존성을 주입한다.</li></ul></li></ul></li><li><h4 id="Spring-DI-컨테이너의-개념"><a href="#Spring-DI-컨테이너의-개념" class="headerlink" title="Spring DI 컨테이너의 개념"></a>Spring DI 컨테이너의 개념</h4><ul><li>Spring DI 컨테이너가 관리하는 객체를 빈(bean)이라고 하며, 이 bean들을 관리한다는 의미로 컨테이너를 빈팩토리(BeanFactory)라고 부른다.</li><li>객체의 생성과 객체 사이의 런타임관계를 DI관점에서 볼 때는 컨테이너를 BeanFacotry라고 한다.</li><li>BeanFacotry에 여러 가지 컨테이너 기능을 추가하여 ApllicationContext)라고 한다.</li></ul></li><li><h4 id="BeanFactory와-ApplicationContext"><a href="#BeanFactory와-ApplicationContext" class="headerlink" title="BeanFactory와 ApplicationContext"></a>BeanFactory와 ApplicationContext</h4><ul><li>BeanFactory<ul><li>Bean을 등록, 생성, 조회, 반환 관리.</li><li>보통은 BeanFactory를 바로 사용하지 않고, 이를 확장한 ApplicationContext를 사용.</li><li>getBean() 메서드가 정의되어 있다.</li></ul></li><li>Application Context<ul><li>Bean을 등록, 생성, 조회, 반환 관리하는 기능은 BeanFactory와 같음.</li><li>Spring의 각종 부가서비스를 추가로 제공.</li><li>Spring이 제공하는 ApplicationContext 구현클래스가 여러가지 종류가 있음.</li></ul></li></ul></li><li><h4 id="Bean"><a href="#Bean" class="headerlink" title="Bean"></a>Bean</h4><ul><li>스프링 IoC 컨테이너에 의해 생성되고 관리되는 객체</li><li>자바에서처럼 new Object(); 로 생성하지 않는다</li><li>각각의 Bean들 끼리는 서로를 편리하게 의존(사용)할 수 있음</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IoC </tag>
            
            <tag> DI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>note1.md</title>
      <link href="/2021/10/06/check/"/>
      <url>/2021/10/06/check/</url>
      
        <content type="html"><![CDATA[<h2 id="유효성-검사"><a href="#유효성-검사" class="headerlink" title="유효성 검사"></a>유효성 검사</h2><p>메서드와 구현부{}를 작성할 때, 제일 먼저 해야 하는 일이 매개변수의 값이 적절한 것인지 확인하는 것이다.<br>메서드를 작성하는 사람은 ‘호출하는 쪽에서 알아서 적절한 값을 넘겨주겠지.’라는 생각을 절대 가져서는 안 된다.<br>타입만 맞으면 어떤 값도 매개변수를 통해 넘어올 수 있기 때문에, 가능한 모든 경우의 수에 대해 고민하고 그에 대비한 코드를 작성해야 한다.<br>아래에 정의된 메서드 divide는 매개변수 x를 y로 나눈 결과를 실수(flaot 타입)로 반환하는데, 0으로 나누는 것은 금지되어 있기 때문에 계산 전에 y의 값이 0인지 확인해야 한다.<br>그래서 y의 값이 0이면, 나누기를 계산할 수 없으므로 return문을 이용해서 작업을 중단하고 메서드를 빠져나와야 한다.<br>그렇지 않으면, 나누기를 하는 문장에서 프로그램이 비정상적으로 종료된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 작업을 하기 전에 나누느 수(y)가 0인지 확인한다.</span></span><br><span class="line">    <span class="keyword">if</span>(y==<span class="number">0</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;0으로 나눌 수 없습니다.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x/(<span class="keyword">float</span>)y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@자바의 정석</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> X </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 문법</title>
      <link href="/2021/09/01/markdown/"/>
      <url>/2021/09/01/markdown/</url>
      
        <content type="html"><![CDATA[<h1 id="헤더1"><a href="#헤더1" class="headerlink" title="헤더1"></a>헤더1</h1><h2 id="헤더2"><a href="#헤더2" class="headerlink" title="헤더2"></a>헤더2</h2><h3 id="헤더3"><a href="#헤더3" class="headerlink" title="헤더3"></a>헤더3</h3><h4 id="헤더4"><a href="#헤더4" class="headerlink" title="헤더4"></a>헤더4</h4><h5 id="헤더5"><a href="#헤더5" class="headerlink" title="헤더5"></a>헤더5</h5><h6 id="헤더6"><a href="#헤더6" class="headerlink" title="헤더6"></a>헤더6</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 헤더1 </span><br><span class="line">## 헤더2</span><br><span class="line">### 헤더3</span><br><span class="line">#### 헤더4</span><br><span class="line">##### 헤더5</span><br><span class="line">###### 헤더6</span><br></pre></td></tr></table></figure><hr># 줄바꿈1번째줄<br><br><br>4번째줄`<br>`<hr>]]></content>
      
      
      <categories>
          
          <category> X </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP vs HTTPS</title>
      <link href="/2021/09/01/httpvshttps/"/>
      <url>/2021/09/01/httpvshttps/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP-vs-HTTPS"><a href="#HTTP-vs-HTTPS" class="headerlink" title="HTTP vs HTTPS"></a>HTTP vs HTTPS</h1><h2 id="1-HTTP-Hyper-Text-Transfer-Protocol"><a href="#1-HTTP-Hyper-Text-Transfer-Protocol" class="headerlink" title="1. HTTP (Hyper Text Transfer Protocol)"></a>1. HTTP (Hyper Text Transfer Protocol)</h2><p>HTTP란 서버/클라이언트 모델을 따라 데이터를 주고 받기 위한 프로토콜이다.<br>인터넷에서 하이퍼텍스트를 교환하기 위한 통신규약으로 80번 포트를 사용한다.<br>HTTP서버가 80번 포트에서 요청을 기다리고 있으며, 클라이언트 또한 80번 포트로 요청을 보내게 된다. HTTP는 애플리케이션 레벨의 프로토콜로 TCP/IP위에서 작동한다. HTTP는 상태를 가지고 있지 않는 Stateless 프로토콜이며 Method, Path, Version, Headers, Body 등으로 구성된다.<br>하지만 HTTP는 암호화가 되지 않은 데이터를 전송하는 프로토콜이기 때문에, http로 비밀번호 등을 주고 받으면 제3자가 정보를 조회할 수 있다. 이러한 문제를 해결하기 위해 https가 등장하게 된다.</p><h5 id="HTTP의-주요-에러"><a href="#HTTP의-주요-에러" class="headerlink" title="HTTP의 주요 에러"></a>HTTP의 주요 에러</h5><ul><li>403 error : 사용자가 권한을 갖고 있지 않을 때 서버가 요청을 거부.</li><li>404 error : Not Found. 클라이언트가 요청한 정보를 서버가 갖고 있지 않을 때. ex) URI가 틀렸을 때.</li><li>500 error : 서버 에러</li></ul><h2 id="2-HTTPS-HTTP-Secure"><a href="#2-HTTPS-HTTP-Secure" class="headerlink" title="2. HTTPS (HTTP Secure)"></a>2. HTTPS (HTTP Secure)</h2><p>HTTPS는 HTTP에 데이터 암호화가 추가된 프로토콜이다.<br>HTTPS는 443번 포트를 사용하며 제3자가 정보를 볼 수 없도록 공개키 암호화를 지원하고 있다.<br>HTTPS는 HTTP의 텍스트에 SSL이나 TLS프로토콜을 통해 데이터를 암호화해서 서버와 브라우저가 민감한 정보를 주고받을 때 데이터가 도난당하는 것을 방지해준다.<br>HTTPS는 인증서를 발급하고 유지하기 위한 추가 비용이 발생한다.</p>]]></content>
      
      
      <categories>
          
          <category> Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
            <tag> X </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Post vs Get</title>
      <link href="/2021/08/18/postvsget/"/>
      <url>/2021/08/18/postvsget/</url>
      
        <content type="html"><![CDATA[<h1 id="GET-보안-X"><a href="#GET-보안-X" class="headerlink" title="GET (보안 X)"></a>GET (보안 X)</h1><p>Get은 서버로부터 정보를 조회하기 위해 설계된 메소드이다.<br>Get은 요청을 전송할 때 필요한 데이터를 Body에 담지 않고, QueryString을 통해 전송한다.  URL의 끝에 ?와 함께 이름과 값으로 쌍을 이루는 요청 파라미터를 쿼리스트링이라고 부른다. 요청 파라미터가 여러개이면 &amp;로 연결한다.<br>즉, URL이 여러 데이터들을 포함하고 있다.</p><h1 id="POST-보안-O"><a href="#POST-보안-O" class="headerlink" title="POST (보안 O)"></a>POST (보안 O)</h1><p>POST는 리소스를 생성/변경하기 위해 설계된 메소드이다.<br>GET과 달리 전송해야 할 데이터를 HTTP 메세지의 Body에 담아서 전송한다.<br>HTTP 메세지의 Body는 길이의 제한없이 데이터를 전송할 수 있다.<br>그래서 POST 요청은 GET과 달리 대용량 데이터를 전송할 수 있다.<br>이처럼 POST는 데이터가 URL이 아닌 Body로 전송되어 내용이 눈에 보이지 않아 GET보다 보안적인 면에서 안전하다고 생각할 수 있지만, POST 요청도 개발자 도구를 통해 내용을 볼 수 있으므로 민감한 데이터는 반드시 암호화해서 전송해야 한다.</p><h1 id="GET과-POST의-차이"><a href="#GET과-POST의-차이" class="headerlink" title="GET과 POST의 차이"></a>GET과 POST의 차이</h1><p>GET은 Idempotent, POST는 Non-idempotent하게 설계되었다<br>Idempotent(멱등)은 동일한 연산을 여러번 수행하더라도 결과가 다르지 않아야 한다.<br>GET은 설계원칙에 따라 서버의 데이터나 상태를 변경시키지 않아야하기 때문에 주로 조회를 할 때에 사용된다.<br>POST는 서버의 상태나 데이터를 변경시킬 때 사용된다. ex) 게시글 등록</p><h1 id="GET-vs-POST-비교표"><a href="#GET-vs-POST-비교표" class="headerlink" title="GET vs POST 비교표"></a>GET vs POST 비교표</h1><table><thead><tr><th align="center">처리방식</th><th align="center">GET방식</th><th align="center">POST방식</th></tr></thead><tbody><tr><td align="center">URL에 데이터 노출 여부</td><td align="center">O</td><td align="center">X</td></tr><tr><td align="center">URL 예시</td><td align="center"><a href="http://localhost:8080/boardList?name=%EC%A0%9C%EB%AA%A9&amp;contents=%EB%82%B4%EC%9A%A9">http://localhost:8080/boardList?name=제목&amp;contents=내용</a></td><td align="center"><a href="http://localhost:8080/addBoard">http://localhost:8080/addBoard</a></td></tr><tr><td align="center">데이터의 위치</td><td align="center">Header</td><td align="center">Body</td></tr><tr><td align="center">캐싱 가능 여부</td><td align="center">O</td><td align="center">X</td></tr></tbody></table><p><br><br><br><br>@<a href="https://hongsii.github.io/2017/08/02/what-is-the-difference-get-and-post/">https://hongsii.github.io/2017/08/02/what-is-the-difference-get-and-post/</a><br>@<a href="https://mangkyu.tistory.com/17">https://mangkyu.tistory.com/17</a></p>]]></content>
      
      
      <categories>
          
          <category> Network </category>
          
          <category> X </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>URI vs URL</title>
      <link href="/2021/08/18/urlvsuri/"/>
      <url>/2021/08/18/urlvsuri/</url>
      
        <content type="html"><![CDATA[<p>정의<br>URI : Uniform Resource Identifier 의 약자로 인터넷상 포현할수 있는 모든 리소스를 의미한다.</p><p>URL : Uniform Resource Locator 의 약자로 URI에서 네트워크상 경로, 어떤 자원의 위치에 대한 절대경로값을 지닌 문자열를 의미한다.</p><p>URI &gt; URL</p><p><a href="http://news.naver.com/main/list.nhn?mode=LPOD&amp;mid=sec&amp;sid1=001&amp;sid2=140&amp;oid=001&amp;isYeonhapFlash=Y&amp;aid=0009998039">http://news.naver.com/main/list.nhn?mode=LPOD&amp;mid=sec&amp;sid1=001&amp;sid2=140&amp;oid=001&amp;isYeonhapFlash=Y&amp;aid=0009998039</a></p><ol><li>protocol</li></ol><ul><li>http://</li></ul><ol start="2"><li>domain</li></ol><ul><li>news.naver.com/</li></ul><ol start="3"><li>경로</li></ol><ul><li>main/</li></ul><ol start="4"><li>파일이름</li></ol><ul><li>list.nhn</li></ul><ol start="5"><li>query</li></ol><ul><li>?mode=LPOD&amp;mid=sec&amp;sid1=001&amp;sid2=140&amp;oid=001&amp;isYeonhapFlash=Y&amp;aid=0009998039</li></ul><p>위의 주소는 URI 이지만, URL이라고 말할 수 없다.<br>URL은 어떤 자원의 위치에 대한 절대경로를 나타낸다.<br>Query는 경로에 따라 변수, 값, 그에 따른 Query 개수도 바뀐다. 즉 상대적인 경로를 가지게 된다. 그렇기에 URL은 상대경로를 나타내는 Query를 가질 수 없다.<br>URL은 <a href="http://news.naver.com/main/list.nhn">http://news.naver.com/main/list.nhn</a> 까지이다.<br>URI는 Query까지 가지고 있는 전체주소이다.</p><img src="/image/URIvsURL.png" width="70%" height="70%"/><p>@<a href="https://mwoo526.tistory.com/17">https://mwoo526.tistory.com/17</a></p>]]></content>
      
      
      <categories>
          
          <category> Network </category>
          
          <category> X </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HTML</title>
      <link href="/2021/08/18/HTML/"/>
      <url>/2021/08/18/HTML/</url>
      
        <content type="html"><![CDATA[<h2 id="input-태그"><a href="#input-태그" class="headerlink" title="input 태그"></a>input 태그</h2><ul><li>form 태그 안에서 추가되는 입력 요소.</li><li>사용자로부터 정보를 받아들이는 용도로 사용되며, type이라는 속성을 이용해서 여러 양식들을 받아들인다.</li><li>ex) 로그인 창에서 id, pw가 입력되는 칸.</li></ul><h3 id="input-태그의-속성"><a href="#input-태그의-속성" class="headerlink" title="input 태그의 속성"></a>input 태그의 속성</h3><ol><li>type : 입력 태그의 유형</li><li>value : 입력 태그의 초기값을 말하며 사용자가 변경 가능하다.</li><li>name : 서버로 전달되는 이름을 말한다.</li></ol><h4 id="type-속성의-종류"><a href="#type-속성의-종류" class="headerlink" title="type 속성의 종류"></a>type 속성의 종류</h4><table><thead><tr><th align="center">type 속성값</th><th align="left">내용</th></tr></thead><tbody><tr><td align="center">text</td><td align="left">텍스트를 입력하는 창을 생성한다.</td></tr><tr><td align="center">password</td><td align="left">비밀번호를 입력하는 창을 생성한다.</td></tr><tr><td align="center">radio</td><td align="left">라디오 버튼을 생성한다.</td></tr><tr><td align="center">checkbox</td><td align="left">체크박스를 생성한다.</td></tr><tr><td align="center">file</td><td align="left">파일이름을 입력하는 창을 생성한다.</td></tr><tr><td align="center">image</td><td align="left">이미지를 전송버튼으로 만든다.</td></tr><tr><td align="center">hiddem</td><td align="left">사용자에게 보이지는 않지만 서버로 전송한다.</td></tr><tr><td align="center">submit</td><td align="left">서버로 제출/전송하는 버튼을 만든다.</td></tr><tr><td align="center">button</td><td align="left">일반 버튼을 생성한다.</td></tr></tbody></table><p>@ <a href="https://yangbari.tistory.com/28">https://yangbari.tistory.com/28</a></p>]]></content>
      
      
      <categories>
          
          <category> X </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JAVA-basic</title>
      <link href="/2021/08/12/java-basic/"/>
      <url>/2021/08/12/java-basic/</url>
      
        <content type="html"><![CDATA[<h2 id="접근-제어자"><a href="#접근-제어자" class="headerlink" title="접근 제어자"></a>접근 제어자</h2><table><thead><tr><th align="center">제어자</th><th align="center">같은 클래스</th><th align="center">같은 패키지</th><th align="center">자손클래스</th><th align="center">전체</th></tr></thead><tbody><tr><td align="center">public</td><td align="center">O</td><td align="center">O</td><td align="center">O</td><td align="center">O</td></tr><tr><td align="center">protected</td><td align="center">O</td><td align="center">O</td><td align="center">O</td><td align="center"></td></tr><tr><td align="center">(default)</td><td align="center">O</td><td align="center">O</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">private</td><td align="center">O</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h4 id="접근제어자를-사용하는-이유-캡슐화"><a href="#접근제어자를-사용하는-이유-캡슐화" class="headerlink" title="접근제어자를 사용하는 이유 : 캡슐화."></a>접근제어자를 사용하는 이유 : 캡슐화.</h4><ul><li>외부로부터 데이터를 보호하기 위해서</li><li>외부에는 불필요한, 내부적으로만 사용되는 부분을 감추기 위해서</li></ul><h2 id="배열"><a href="#배열" class="headerlink" title="배열"></a>배열</h2><h4 id="배열의-선언"><a href="#배열의-선언" class="headerlink" title="배열의 선언"></a>배열의 선언</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span>[] score = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123; <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;  <span class="comment">//new int 생략가능</span></span><br><span class="line"><span class="keyword">int</span>[] score2 = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br></pre></td></tr></table></figure><h4 id="배열-복사"><a href="#배열-복사" class="headerlink" title="배열 복사"></a>배열 복사</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// num[0]에서 newNum[0]으로 num.length개의 데이터를 복사.</span></span><br><span class="line">System.arraycopy(num, <span class="number">0</span>, newNum, <span class="number">0</span>, num.length);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> basic </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>write</title>
      <link href="/2021/07/30/write/"/>
      <url>/2021/07/30/write/</url>
      
        <content type="html"><![CDATA[<p>X</p>]]></content>
      
      
      <categories>
          
          <category> X </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>my second post</title>
      <link href="/2021/07/30/my-new-post2/"/>
      <url>/2021/07/30/my-new-post2/</url>
      
        <content type="html"><![CDATA[<p>X</p>]]></content>
      
      
      <categories>
          
          <category> X </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Forward vs Redirect</title>
      <link href="/2021/07/29/forwardredirect/"/>
      <url>/2021/07/29/forwardredirect/</url>
      
        <content type="html"><![CDATA[<p>X</p>]]></content>
      
      
      <categories>
          
          <category> Network </category>
          
          <category> X </category>
          
      </categories>
      
      
        <tags>
            
            <tag> forward </tag>
            
            <tag> redirect </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/07/29/hello-world/"/>
      <url>/2021/07/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
